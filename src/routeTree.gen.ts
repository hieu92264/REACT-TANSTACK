/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as featuresLayoutImport } from './routes/(features)/_layout'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as featuresLayoutIndexImport } from './routes/(features)/_layout.index'

// Create Virtual Routes

const featuresImport = createFileRoute('/(features)')()
const featuresLayoutUsersIndexLazyImport = createFileRoute(
  '/(features)/_layout/users/',
)()

// Create/Update Routes

const featuresRoute = featuresImport.update({
  id: '/(features)',
  getParentRoute: () => rootRoute,
} as any)

const featuresLayoutRoute = featuresLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => featuresRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const featuresLayoutIndexRoute = featuresLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => featuresLayoutRoute,
} as any)

const featuresLayoutUsersIndexLazyRoute = featuresLayoutUsersIndexLazyImport
  .update({
    id: '/users/',
    path: '/users/',
    getParentRoute: () => featuresLayoutRoute,
  } as any)
  .lazy(() =>
    import('./routes/(features)/_layout.users/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(features)': {
      id: '/(features)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof featuresImport
      parentRoute: typeof rootRoute
    }
    '/(features)/_layout': {
      id: '/(features)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof featuresLayoutImport
      parentRoute: typeof featuresRoute
    }
    '/(features)/_layout/': {
      id: '/(features)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof featuresLayoutIndexImport
      parentRoute: typeof featuresLayoutImport
    }
    '/(features)/_layout/users/': {
      id: '/(features)/_layout/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof featuresLayoutUsersIndexLazyImport
      parentRoute: typeof featuresLayoutImport
    }
  }
}

// Create and export the route tree

interface featuresLayoutRouteChildren {
  featuresLayoutIndexRoute: typeof featuresLayoutIndexRoute
  featuresLayoutUsersIndexLazyRoute: typeof featuresLayoutUsersIndexLazyRoute
}

const featuresLayoutRouteChildren: featuresLayoutRouteChildren = {
  featuresLayoutIndexRoute: featuresLayoutIndexRoute,
  featuresLayoutUsersIndexLazyRoute: featuresLayoutUsersIndexLazyRoute,
}

const featuresLayoutRouteWithChildren = featuresLayoutRoute._addFileChildren(
  featuresLayoutRouteChildren,
)

interface featuresRouteChildren {
  featuresLayoutRoute: typeof featuresLayoutRouteWithChildren
}

const featuresRouteChildren: featuresRouteChildren = {
  featuresLayoutRoute: featuresLayoutRouteWithChildren,
}

const featuresRouteWithChildren = featuresRoute._addFileChildren(
  featuresRouteChildren,
)

export interface FileRoutesByFullPath {
  '/login': typeof authLoginRoute
  '/': typeof featuresLayoutIndexRoute
  '/users': typeof featuresLayoutUsersIndexLazyRoute
}

export interface FileRoutesByTo {
  '/login': typeof authLoginRoute
  '/': typeof featuresLayoutIndexRoute
  '/users': typeof featuresLayoutUsersIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)/login': typeof authLoginRoute
  '/(features)': typeof featuresRouteWithChildren
  '/(features)/_layout': typeof featuresLayoutRouteWithChildren
  '/(features)/_layout/': typeof featuresLayoutIndexRoute
  '/(features)/_layout/users/': typeof featuresLayoutUsersIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/' | '/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/users'
  id:
    | '__root__'
    | '/(auth)/login'
    | '/(features)'
    | '/(features)/_layout'
    | '/(features)/_layout/'
    | '/(features)/_layout/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authLoginRoute: typeof authLoginRoute
  featuresRoute: typeof featuresRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authLoginRoute: authLoginRoute,
  featuresRoute: featuresRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)/login",
        "/(features)"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(features)": {
      "filePath": "(features)",
      "children": [
        "/(features)/_layout"
      ]
    },
    "/(features)/_layout": {
      "filePath": "(features)/_layout.tsx",
      "parent": "/(features)",
      "children": [
        "/(features)/_layout/",
        "/(features)/_layout/users/"
      ]
    },
    "/(features)/_layout/": {
      "filePath": "(features)/_layout.index.tsx",
      "parent": "/(features)/_layout"
    },
    "/(features)/_layout/users/": {
      "filePath": "(features)/_layout.users/index.lazy.tsx",
      "parent": "/(features)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
